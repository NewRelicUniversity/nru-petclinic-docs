{
    "docs": [
        {
            "location": "/", 
            "text": "Using the Pet Clinic Sample Application\n\n\nNew Relic's APM training includes a hands-on lab, in which students practice using APM to troubleshoot an application performance problem. We typically use the \nSpring Pet Clinic sample application\n for this exercise; the application has a memory leak which causes it to perform poorly under load. \n\n\nThis document describes how to deploy the sample application, how to use New Relic Synthetics to generate traffic to the app, and how to stress the application so that the performance problem becomes apparent.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#using-the-pet-clinic-sample-application", 
            "text": "New Relic's APM training includes a hands-on lab, in which students practice using APM to troubleshoot an application performance problem. We typically use the  Spring Pet Clinic sample application  for this exercise; the application has a memory leak which causes it to perform poorly under load.   This document describes how to deploy the sample application, how to use New Relic Synthetics to generate traffic to the app, and how to stress the application so that the performance problem becomes apparent.", 
            "title": "Using the Pet Clinic Sample Application"
        }, 
        {
            "location": "/deploying-petclinic/", 
            "text": "Deploying the Pet Clinic Application\n\n\nPrerequisites\n\n\nFor ease of deployment, we run the sample application in \nDocker\n containers. In order to deploy the application, you will need: \n\n\n\n\n\n\nA host running MacOS or a Linux-based operating system with \nDocker\n installed. We use a t2.small EC2 instance running at AWS. (The application may run under Docker on Windows, but we have not tested it. The deployment process for Windows may differ somewhat from these instructions);\n\n\n\n\n\n\nA \nNew Relic Pro or Enterprise account\n. \n\n\n\n\n\n\nDeployment Steps\n\n\n\n\n\n\nCreate mapped directories.\n Log into your host and create two directories: one for the New Relic agent and associated files, and the other for the Pet Clinic application itself. These directories will be mapped into the Docker container, allowing you to modify the application or New Relic configuration without rebuilding the container.\n\n\nIn this example, the directories are named \nnewrelic\n and \nwebapps\n, and are created in the home directory of the logged-in user:\n\n\n$ mkdir newrelic\n$ mkdir webapps\n\n\n\n\n\n\n\n\n\nDownload the New Relic Java agent.\n While still logged into your host, execute the following commands to download and extract the New Relic Java agent. Replace the \n{account-id}\n placeholder with your New Relic account ID, and the \nX.X.X\n placeholder with the version number of the downloaded file:\n\n\n$ wget https://rpm.newrelic.com/accounts/\n{\naccount-id\n}\n/download_agent?lang\n=\njava\n$ unzip newrelic-java-X.X.X.zip\n\n\n\n\n\n\n\n\n\nReplace the default newrelic.yml configuration file.\n Execute the following command to download a customized \nnewrelic.yml\n file into the \nnewrelic\n directory:\n\n\n$ wget https://github.com/NewRelicUniversity/nru-petclinic-docs/blob/master/newrelic.yml -O newrelic/newrelic.yml\n\n\n\n\n\nThis file uses environment variables for the license key and app name, and disables the New Relic Java agent's \ncircuit breaker\n. \n\n\n\n\n\n\nDownload the Pet Clinic application.\n Execute the following command to download the \npetclinic.war\n file into the \nwebapps\n directory:\n\n\n$ wget https://github.com/NewRelicUniversity/generate-apm-data/raw/master/petclinic-1.0.war -O webapps/petclinic.war\n\n\n\n\n\n\n\n\n\nStart the MySQL Docker container.\n Execute the following command to create a Docker container running MySQL: \n\n\n$ docker run -d --name mysql \n\\ \n\n    -e \nMYSQL_ROOT_PASSWORD\n=\npetclinic\n \n\\ \n\n    -e \nMYSQL_DATABASE\n=\npetclinic\n \n\\ \n\n    -e \nMYSQL_USER\n=\npetclinic\n \n\\ \n\n    -e \nMYSQL_PASSWORD\n=\npetclinic\n \n\\ \n\n    -p \n3306\n:3306 mysql:5.5\n\n\n\n\n\n\n\n\n\nStart the Apache Tomcat Docker container.\n Execute the following command to create a Docker container running Apache Tomcat. Replace the \n{your-license-key}\n placeholder with the license key of your New Relic account. If you wish, you may change the value of the \nNEW_RELIC_APP_NAME\n parameter: \n\n\n$ docker run -it -d --tmpfs /run --tmpfs /tmp --name petclinic \n\\ \n\n    -e \nNEW_RELIC_APP_NAME\n=\nNew Relic Pet Clinic\n \n\\ \n\n    -e \nJAVA_OPTS\n=\n-Xms128m -Xmx320m -XX:MaxPermSize=128m -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\n \n\\ \n\n    -e \nJDBC_CONNECTION_STRING\n=\njdbc:mysql://mysql:3306/petclinic\n \n\\ \n\n    -e \nNEW_RELIC_LICENSE_KEY\n=\n{your-license-key}\n \n\\ \n\n    -v ~/webapps:/usr/local/tomcat/webapps \n\\\n\n    -v ~/newrelic:/usr/local/tomcat/newrelic \n\\ \n\n    --link mysql:mysql -p \n80\n:8080 tomcat:8.0\n\n\n\n\n\nThe above command maps the \nwebapps\n folder on your host machine to Tomcat's \nwebapps\n folder inside the container; Tomcat should start the Pet Clinic application automatically.\n\n\n\n\n\n\nAfter a few minutes, you should be able to access the Pet Clinic application at \n\nhttp://{your-host-name}/petclinic\n.", 
            "title": "Deploying the Pet Clinic Application"
        }, 
        {
            "location": "/deploying-petclinic/#deploying-the-pet-clinic-application", 
            "text": "", 
            "title": "Deploying the Pet Clinic Application"
        }, 
        {
            "location": "/deploying-petclinic/#prerequisites", 
            "text": "For ease of deployment, we run the sample application in  Docker  containers. In order to deploy the application, you will need:     A host running MacOS or a Linux-based operating system with  Docker  installed. We use a t2.small EC2 instance running at AWS. (The application may run under Docker on Windows, but we have not tested it. The deployment process for Windows may differ somewhat from these instructions);    A  New Relic Pro or Enterprise account .", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/deploying-petclinic/#deployment-steps", 
            "text": "Create mapped directories.  Log into your host and create two directories: one for the New Relic agent and associated files, and the other for the Pet Clinic application itself. These directories will be mapped into the Docker container, allowing you to modify the application or New Relic configuration without rebuilding the container.  In this example, the directories are named  newrelic  and  webapps , and are created in the home directory of the logged-in user:  $ mkdir newrelic\n$ mkdir webapps    Download the New Relic Java agent.  While still logged into your host, execute the following commands to download and extract the New Relic Java agent. Replace the  {account-id}  placeholder with your New Relic account ID, and the  X.X.X  placeholder with the version number of the downloaded file:  $ wget https://rpm.newrelic.com/accounts/ { account-id } /download_agent?lang = java\n$ unzip newrelic-java-X.X.X.zip    Replace the default newrelic.yml configuration file.  Execute the following command to download a customized  newrelic.yml  file into the  newrelic  directory:  $ wget https://github.com/NewRelicUniversity/nru-petclinic-docs/blob/master/newrelic.yml -O newrelic/newrelic.yml  This file uses environment variables for the license key and app name, and disables the New Relic Java agent's  circuit breaker .     Download the Pet Clinic application.  Execute the following command to download the  petclinic.war  file into the  webapps  directory:  $ wget https://github.com/NewRelicUniversity/generate-apm-data/raw/master/petclinic-1.0.war -O webapps/petclinic.war    Start the MySQL Docker container.  Execute the following command to create a Docker container running MySQL:   $ docker run -d --name mysql  \\  \n    -e  MYSQL_ROOT_PASSWORD = petclinic   \\  \n    -e  MYSQL_DATABASE = petclinic   \\  \n    -e  MYSQL_USER = petclinic   \\  \n    -e  MYSQL_PASSWORD = petclinic   \\  \n    -p  3306 :3306 mysql:5.5    Start the Apache Tomcat Docker container.  Execute the following command to create a Docker container running Apache Tomcat. Replace the  {your-license-key}  placeholder with the license key of your New Relic account. If you wish, you may change the value of the  NEW_RELIC_APP_NAME  parameter:   $ docker run -it -d --tmpfs /run --tmpfs /tmp --name petclinic  \\  \n    -e  NEW_RELIC_APP_NAME = New Relic Pet Clinic   \\  \n    -e  JAVA_OPTS = -Xms128m -Xmx320m -XX:MaxPermSize=128m -javaagent:/usr/local/tomcat/newrelic/newrelic.jar   \\  \n    -e  JDBC_CONNECTION_STRING = jdbc:mysql://mysql:3306/petclinic   \\  \n    -e  NEW_RELIC_LICENSE_KEY = {your-license-key}   \\  \n    -v ~/webapps:/usr/local/tomcat/webapps  \\ \n    -v ~/newrelic:/usr/local/tomcat/newrelic  \\  \n    --link mysql:mysql -p  80 :8080 tomcat:8.0  The above command maps the  webapps  folder on your host machine to Tomcat's  webapps  folder inside the container; Tomcat should start the Pet Clinic application automatically.    After a few minutes, you should be able to access the Pet Clinic application at  http://{your-host-name}/petclinic .", 
            "title": "Deployment Steps"
        }
    ]
}